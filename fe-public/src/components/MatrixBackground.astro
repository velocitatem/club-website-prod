---
import {v4 as uuidv4} from "uuid";

interface Props {
    length: number;
    amplitude: number;
    period: number;
    falloff: number;
    flip: boolean;
}

const { length, amplitude, period, falloff , flip} = Astro.props;

const idString = uuidv4();

function getId(){
    return idString;
}
---

<div class="matrix-bg" id="matrix-bg">
    <pre>
        <div class="matrixHeaderDE" id={"matrixHeaderDE" + idString}></div>
    </pre>

    <div style="display: none;">
        <div id="lengthPass">{length}</div>
        <div id="amplitudePass">{amplitude}</div>
        <div id="periodPass">{period}</div>
        <div id="falloffPass">{falloff}</div>
        <div id="flipPass">{flip}</div>
        <div id="idPass">{idString}</div>
    </div>
</div>


<script type="module">
    const chars = `abcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPQRSTUVWZ1234567890!@#$%^&*()_+-=`;

    const length = parseFloat(document.getElementById("lengthPass").innerHTML);
    const amplitude = parseFloat(document.getElementById("amplitudePass").innerHTML);
    const period = parseFloat(document.getElementById("periodPass").innerHTML);
    const falloff = parseFloat(document.getElementById("falloffPass").innerHTML);
    const flip = document.getElementById("flipPass").innerHTML.toString() == "true";

    const idString = document.getElementById("idPass").innerHTML.toString();

    function randomChar(){
        return chars[Math.floor(Math.random() * (chars.length - 1))];
        }

    function generateWave(size, length, amplitude, period, offset){
        let string = "";
        for(let y = 0; y < length + amplitude*2; y++){
            for(let x = 0; x < size; x++){
                let tLen = length + amplitude * Math.sin((x + offset)/period) + Math.sin((x + offset/2)/(period*1.5)) * amplitude/2 + Math.sin((x + offset/3)/(period*2)) * amplitude/2;
                let l = flip? (tLen - y - length + amplitude) :  (y-tLen);
                let p = 1/(1 + Math.exp(falloff * l));
                if(Math.random() >= p) string += " ";
                    else string += randomChar();
                }
            string += "\n";
            }

        return string;
        }

    const generateWaveAndUpdateElement = (elementId, initialOffset, delay) => {
        let offset = initialOffset;
        const element = document.getElementById(elementId);

        const update = () => {
            const wave = generateWave(window.outerWidth/2, length, amplitude, period, offset);
            element.innerText = wave.toString();
            const goofyPeriodMultiplier = 12; //DO NOT CHANGE THIS OR SIN FUNCTION
            offset = (offset + 1) % (period * goofyPeriodMultiplier * 3.14);
            setTimeout(update, delay);
            };

        setTimeout(update, delay);
        };

    generateWaveAndUpdateElement("matrixHeaderDE" + idString, 0, 50);

    const bg_element = document.getElementById("matrix-bg");
    bg_element.style.position = flip? "relative" : "absolute";

</script>
<style>
    .matrix-bg, .matrixHeaderDE {
        width: 100%;
        top: -20px;
        left: 0;
        z-index: 0;
        color: lightgray;
        user-select: none;
    }
</style>