---
import getSortedPosts from "../scripts/load-posts";

let averageCommitContent = 0;

// fetch data from /github/orgrank/ranking
// get backend url from env variable
const backendUrl = import.meta.env.BACKEND_URL;
const githubRankingUrl = backendUrl + "/github/orgrank/ranking";
let users = [];
try {

    const githubRankingResponse = await fetch(githubRankingUrl);
    const githubRanking = await githubRankingResponse.json();

    // for each user check if they hve at least 2 data entries under .data
    users = githubRanking.filter((user) => user.data.length >= 2);
    console.log(users);
    users = users.map((user) => {
        // we have 3 data entries
        // sort them by date
        user.data.sort((a, b) => {
            return new Date(a.date) - new Date(b.date);
        });
        // get the first and last entry
        let earlyData = user.data[0];
        let lateData = user.data[user.data.length - 1];
        let middleData = user.data[user.data.length - 2];
        return {
            username: user.username,
            id: user.data[0]?.user?.id,
            commits: lateData.commits - earlyData.commits,
            pull_requests: lateData.pull_requests - earlyData.pull_requests,
            diff: (lateData.commits - middleData.commits) + " | "
                + (lateData.pull_requests - middleData.pull_requests)
        }
    })
    .filter((user) => user.id != null);
    console.log(users);
} catch (e) {
    console.log(e);
}


function rawScore(c, pr){
    const commitMultiplier = 1;
    const prMultiplier = 3.5 ;
    return c * commitMultiplier + pr * prMultiplier;
}
function score(c, pr, uc, up){
    return (1 + rawScore(c,pr)/rawScore(uc, up))/2.0;
}

function compareUsers(a, b){
    let as = rawScore(a.commits, a.pull_requests);
    let bs = rawScore(b.commits, b.pull_requests);

    return as < bs? 1 : as == bs? 0 : -1;
}
users.sort(compareUsers);
---

<div style="text-align: center;"><h2>Gitribution Scale</h2></div>
<table class="center">
    <div id="info-box" style="display: none;" ><p style="padding: 5px;">Please note, GitHub only tracks commits on or merged to main.</p></div>
    <tr>
        <th>USER</th>
        <th><div style="margin-right: 40px;">
            <p class="inline">CONTRIBUTIONS</p>
            <button class="inline info-marker" id="info-marker">?</button>
        </div></th>
        <th>PAST 24hr</th>
    </tr>
    <tbody>
    {users.map((user) => (
            <tr>
                <td>
                    <div style="text-align: center; margin-left: 15px; margin-right: 15px; margin-top:10px;">
                        <a href={"https://github.com/" + user.username} target="_blank">
                            <img src={"https://avatars.githubusercontent.com/u/" + user.id} alt={user.username + " icon"} id="user-icon" class="center" width="50">
                            {user.username}
                        </a>
                    </div>
                </td>
                <td>
                    <div>
                        <div style="margin-top: 10px;">
                            <progress id="progress" value={rawScore(user.commits, user.pull_requests)} max={rawScore(users[0].commits, users[0].pull_requests)}></progress>
                        </div>
                        <div>
                            {user.commits + " commits, " + user.pull_requests + " pull requests"}
                        </div>

                    </div>
                </td>
                <td style="text-align: center;">{user.diff}</td>
            </tr>
    ))}
    </tbody>
</table>
<style>
    table, th, td {
        //border: 1px solid black;
        border-bottom: 1px solid black;
    }
    .center {
        margin-left: auto;
        margin-right: auto;
    }
    #user-icon{
        border-radius: 50%;
    }
    #info-marker{
        padding-left: 20px;
        color: darkgray;
    }
    #info-box{
        background-color: lightgray;
        border: 1px solid black;
        position: absolute;
        width: 20%;
        margin-left: auto;
        margin-right: auto;
        left: 40%;
        top: -40px;
    }

    progress{
        -webkit-appearance: none;
        appearance: none;
    width: 100%; /* default to full width on smaller screens */
    max-width: 400px; /* limit maximum width to 400px */
        height: 10px;
        border-radius: 100%;
    }

    /* Media query for larger screens */
    @media (min-width: 768px) {
        progress {
            width: 400px; /* set fixed width on larger screens */
        }
    }


    progress[value]::-webkit-progress-bar {
        background-color: #eee;
        border-radius: 10px;
        //box-shadow: 0 2px 5px rgba(0, 0, 0, 0.25) inset;
    }
    progress[value]::-webkit-progress-value {
        border-radius: 10px;
    //box-shadow: 0 2px 5px rgba(0, 0, 0, 0.25) inset;
    }
</style>
<script>
    const infoBox = document.getElementById("info-box");
    function toggleInfo(){
        if(infoBox.style.display == "none")
            infoBox.style.display = "block";
        else infoBox.style.display = "none";
    }

    const buttons = document.querySelectorAll('button.info-marker');
    buttons.forEach((button) => {
        button.addEventListener('pointerenter', () => {
            toggleInfo();
        });
        button.addEventListener('pointerleave', () => {
            toggleInfo();
        });
    })
</script>
